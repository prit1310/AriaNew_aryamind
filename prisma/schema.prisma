datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String           @id @default(cuid())
  name              String
  email             String?          @unique
  password          String?
  subscriptionPlan  SubscriptionPlan? @relation(fields: [subscriptionPlanId], references: [id])
  subscriptionPlanId String?         @unique
  templateUsage     TemplateUsage?
  uploadedFiles     UploadedFile[]
  activityLogs      ActivityLog[]
  callLogs          CallLog[]
  billingHistories  BillingHistory[]
  resetOtp          String?
  resetOtpExpiry    DateTime?
  emailVerified     Boolean          @default(false)
  username          String?          @unique

  syncStatus      UserSyncStatus?

  // Fixed: Changed from ScheduledCall[] to ScheduledCall[] (capital S)
  scheduledCalls    ScheduledCall[]
}

model SubscriptionPlan {
  id          String   @id @default(cuid())
  name        String
  type        String   // e.g. "Basic", "Professional", "Advanced"
  billing     String   // "monthly" or "annually"
  price       Int
  startedAt   DateTime @default(now())
  expiresAt   DateTime
  user        User?    @relation
}

model TemplateUsage {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  pdfDownloadCount  Int      @default(0)
  csvDownloadCount  Int      @default(0)
  pdfUploadCount    Int      @default(0)
  csvUploadCount    Int      @default(0)
}

model UploadedFile {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  filename  String
  mimetype  String
  size      Int
  uploadedAt DateTime @default(now())
  type      String   // 'pdf' or 'csv'
  greetingMessage String?
  endMessage String?
}

model ActivityLog {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String   // e.g. "login", "upload_pdf", "download_csv", "update_profile"
  detail    String?  // optional: extra info (filename, etc.)
  status    String   // e.g. "completed", "cancelled"
  createdAt DateTime @default(now())
}

model CallLog {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  timestamp   DateTime
  callSid     String
  phoneNumber String
  toNumber    String?  
  userSaid    String
  botResponse String
  intent      String?  
  logHash     String   @unique
  sessionId   String?
  duration    Int?     // call duration in seconds
  status      String?  // call status
  agent       String?  // Agent category: "Education", "Hospital", "Real Estate"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model BillingHistory {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String
  planName         String
  billingType      String   // "monthly" or "annually"
  price            Int
  subscribedAt     DateTime @default(now())
  expiresAt        DateTime
}

model EmailVerification {
  id        String   @id @default(cuid())
  email     String   @unique
  code      String
  expiresAt DateTime
  attempts  Int      @default(0)
  createdAt DateTime @default(now())
}

model Contact {
  id             String   @id @default(cuid())
  name           String
  email          String
  phone          String
  message        String
  submittedBy    String   @default("anonymous")
  isAuthenticated Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

// Fixed: Changed model name from scheduledCall to ScheduledCall (capital S)
model ScheduledCall {
  id              String    @id @default(cuid())
  userId          String
  to              String
  from            String
  category        String
  scheduledAt     DateTime
  callMode        String    @default("normal")
  voiceId         String?
  modelId         String?
  stability       Float?
  similarityBoost Float?
  style           Float?
  useSpeakerBoost Boolean?
  status          String    @default("scheduled") // scheduled, executing, completed, failed
  callSid         String?
  callStatus      String?
  agentResponse   String?
  error           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  executedAt      DateTime?
  completedAt     DateTime?
  failedAt        DateTime?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("scheduled_calls")
}

model UserSyncStatus {
  id              String   @id @default(cuid())
  userId          String   @unique
  username        String   @unique
  lastSyncAt      DateTime @default(now())
  lastLogHash     String?  // Hash of the last processed log
  totalLogCount   Int      @default(0)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}